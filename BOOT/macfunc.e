(DEFINE EXPAND-COND (LAMBDA (E) (IF (NULL? (CDR E)) #F (IF (NOT (PAIR? (CADR E))) (ERROR "illegal cond syntax") (IF (EQ? (QUOTE ELSE) (CAADR E)) (APPEND (QUOTE (BEGIN)) (CDADR E)) (IF (NULL? (CDADR E)) (LIST (QUOTE OR) (CAADR E) (APPEND (QUOTE #F) (CDDR E))) (LIST (QUOTE IF) (CAADR E) (APPEND (QUOTE (BEGIN)) (CDADR E)) (APPEND (QUOTE #F) (CDDR E)))))))))
(DEFINE EXPAND-LET (LAMBDA (E) (IF (NULL? (CADR E)) (BEGIN (APPEND (QUOTE (BEGIN)) (CDDR E))) (IF (ATOM? (CADR E)) (BEGIN (EXPAND-NAMED-LET E)) (BEGIN (EXPAND-LET2 E))))))
(DEFINE EXPAND-LET2 (LAMBDA (E) (CONS (APPEND (LIST (QUOTE LAMBDA) (MAP1 CAR (CADR E))) (CDDR E)) (MAP1 CADR (CADR E)))))
(DEFINE EXPAND-NAMED-LET (LAMBDA (E) (LIST (QUOTE LETREC) (LIST (LIST (CADR E) (APPEND (IF (NULL? (CADDR E)) (QUOTE ()) (LIST (QUOTE LAMBDA) (MAP1 CAR (CADDR E)))) (CDDDR E)))) (CONS (CADR E) (MAP1 CADR (CADDR E))))))
(DEFINE EXPAND-LET* (LAMBDA (E) (IF (NULL? (CADR E)) (APPEND (QUOTE (BEGIN)) (CDDR E)) (LIST (QUOTE LET) (CONS (CAADR E) (QUOTE ())) (APPEND (LIST (QUOTE LET*) (CDADR E)) (CDDR E))))))
(DEFINE LETREC-BIND (LAMBDA (E) (LIST (CAR E) #T)))
(DEFINE LETREC-SET (LAMBDA (E) (LIST (QUOTE SET!) (CAR E) (CADR E))))
(DEFINE EXPAND-LETREC (LAMBDA (E) (APPEND (QUOTE (BEGIN)) (LIST (MAP1 LETREC-BIND (CADR E))) (MAP1 LETREC-SET (CADR E)) (CDDR E))))
(DEFINE EXPAND-UNLESS (LAMBDA (E) (LIST (QUOTE IF) (LIST (QUOTE NOT) (CADR E)) (APPEND (QUOTE (BEGIN)) (CDDR E)))))
(DEFINE EXPAND-WHEN (LAMBDA (E) (LIST (QUOTE IF) (CADR E) (APPEND (QUOTE (BEGIN)) (CDDR E)))))
