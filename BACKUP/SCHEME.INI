;;; SCHEME.INI - Scheme initialization file.

(define (cadr l) (car (cdr l)))
(define (caddr l) (car (cdr (cdr l))))
(define (cddr l) (cdr (cdr l)))
(define (cdddr l) (cdr (cdr (cdr l))))
(define (caadr l) (car (car (cdr l))))
(define (cdadr l) (cdr (car (cdr l))))

;;; Boxes
(define (box l) (cons '*BOX* l))
(define (boxed-obj? b) (eq? (car b) '*BOX*))
(define (unbox b) (if (boxed-obj? b) (cdr b) (error b "is not a box")))
(define (set-box! b l) (if (boxed-obj? b) (set-cdr! b l) (error b "is not a box")))

;;; Quasi-quote expander - Version 1
;;;	written by Jason Coughlin
;;;
;;;	NOTE: Doesn't handle nested quasiquotations.

(define-form (quasiquote *qq-exp*) (qq *qq-exp* (the-environment)))

;; (qq exp)
;;	atom		=>	atom
;;	,exp		=>	(eval exp)
;;	,@exp		=>	illegal syntax
;;	( ,@exp )	=>	(append (eval (car exp)) (qq (cdr exp)))
;;	( elem elem )	=>	(cons (qq (car exp)) (qq (cdr exp)))
(define (qq exp env)
   (cond
	( (null? exp)			exp )
	( (not (pair? exp))		exp )
	( (eq? (car exp) 'unquote)	(eval (cadr exp) env))
	( (is-splice? exp)		(error "illegal syntax") )
	( (is-splice? (car exp))	(append
						(eval (cadr (car exp)) env)
						(qq (cdr exp) env)) )

	( else				(cons
						(qq (car exp) env)
						(qq (cdr exp) env)) )
   )
)

;; (is-splice? x) - Returns #t if the expression is the (unquote-splice ...)
;;	element.
(define (is-splice? x)
   (and (pair? x) (eq? (car x) 'unquote-splice))
)

;;; System expander - Version 1
;;;	written by Jason Coughlin

;; (expand-once exp)
;;	'()			=>	'()
;;	atom			=>	atom
;;	(x a1 a2...) && macro x	=>	(x's expander exp)
;;	(x a1 a2...) && no macro=>	expand on x's components
(define (expand-once exp)
   (if (not (pair? exp))

	exp

	(let* ( (exp-bind (assoc (car exp) *EXPANSION-TABLE*))
		(expander (and (not (null? exp-bind)) (cdr exp-bind))) )

		(if (null? expander)
			(map expand-once exp)
			(expander exp)
		)
	)
   )
)

;; (expand exp) -- Fully expand exp.
(define expand
 (lambda (exp)
   (if (not (pair? exp))

	exp

	(let* ( [exp-bind (assoc (car exp) *EXPANSION-TABLE*)]
		[expander (and (not (null? exp-bind)) (cdr exp-bind))] )

		(if (null? expander)
			(map expand exp)
			(expand (map expand (expander exp)))
		)
	)
   )
 )
)
